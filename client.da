import logging
import logging.handlers
import logging.config

from time import sleep

from common import Request, Response

class Client(process):
	
	def setup(coordinators, my_index, config):
		self.logger = logging.getLogger('sLogger')

		current_section = "client" + str(my_index)
		
		request_list = []

		if (config.options(current_section)):
			sequence = config.get(current_section, "sequence")
			request_list = sequence.split(",")
		else:
			sequence = None
			request_list = []

		self.total_requests = []

		self.num_requests = len(request_list)
		self.current_request_index = 0

		self.send_sequence = 1
		self.recv_sequence = 1

		for i in request_list:
			sub_id = int(config.get(i, "subject_id"))
			res_id = int(config.get(i, "resource_id"))
			action = str(config.get(i, "action"))

			request = Request(sub_id, res_id, action)

			total_requests.append(request)
		

	def sendtask():
		
		request = total_requests[current_request_index]

		rid = request.subject_id % len(coordinators)

		logger.info("[Client] Request sent (seq. %s) total_requests Subject Coord %s ", 
			send_sequence, str(request))

		recv_sequence = recv_sequence + 1

		send(('FROM_CLIENT', request),to=(coordinators[rid]))

	def run():

		if (my_index == 2):
			sleep(1)

		sendtask()
		
		await(num_requests == current_request_index)

	def receive(msg=('OUTCOME', response), from_ = p):

		logger.info("[Client] Response received (seq. %s) from Subject Coord %s ", 
			recv_sequence, str(response))

		recv_sequence = recv_sequence + 1
		
		current_request_index  = current_request_index + 1

		if (num_requests > current_request_index):
			sendtask()