import xml.etree.ElementTree as ET
from common import Request, Response
import operator

class Rule(object):
    def __init__(self, subject_condition, resource_condition, action, subject_update, resource_update):
        self.subject_condition = subject_condition
        self.resource_condition = resource_condition
        self.action = action
        self.subject_update = subject_update
        self.resource_update = resource_update

class Worker(process):
    def setup(coordinators:list, database, config):
        self.status = False
        self.coordinators = coordinators
        self.policy_map = {}
        self.database = database

        policy_file = config.get("setup", "policy_def_file")

        read_policy(policy_file)

    def does_attribute_value_satisfy_condition(value_in_policy, value_from_db):
        if value_in_policy[0] == '>' or value_in_policy[0] == "<":
            ops = { ">": operator.gt, "<": operator.lt}
            integer_value_in_policy = int(value_in_policy[1:])
            try:
                integer_value_from_db = int(value_from_db)
                if ops[value_in_policy[0]](integer_value_from_db, integer_value_in_policy):
                    return True
                else:
                    return False
            except:
                return False
        if value_in_policy != value_from_db:
            return False
        else:
            return True

    def validate_attributes_in_policy(rule_map, db_attributes_map):
        if len(rule_map) == 0 or len(db_attributes_map) == 0:
            return False
        key_size = len(rule_map.keys())
        count = 0
        for key in rule_map.keys():
            if key in db_attributes_map:

                """"
                Here we check for the value of the attributes
                In case we have < or > operators, we need to evaluate accordingly
                """
                if does_attribute_value_satisfy_condition(rule_map[key], db_attributes_map[key]):
                    count+=1
                else:
                    break
            else:
                break
        if count != key_size:
            return False
        return True

    def update_attributes_after_policy_evaluation(update_condition, attribute_list_to_evaluate_policy):
        to_update = {}
        if update_condition:
            for key, value in update_condition.items():
                if value == "++":
                    to_update[key] = str(int(attribute_list_to_evaluate_policy[key]) + 1)
                elif value == "--":
                    to_update[key] = str(int(attribute_list_to_evaluate_policy[key]) - 1)
                else:
                    to_update[key] = update_condition[key]
        return to_update

    def read_policy(policy_xml):
        tree = ET.parse(policy_xml)
        root = tree.getroot()
        for rule in root.iter('rule'):
            sc=rule.find('subjectCondition').attrib
            rc=rule.find('resourceCondition').attrib
            act=rule.find('action').attrib
            su=rule.find('subjectUpdate')
            if su != None:
                su = su.attrib
            ru=rule.find('resourceUpdate')
            if ru != None:
                ru = ru.attrib

            rule_object = Rule(sc, rc, act, su, ru)

            """
            Adding the Rule object to the action map.
            So each action will have a list of Rule objects
            that satisfy that action.
            """
            if act["name"] in self.policy_map.keys():
                self.policy_map[act["name"]].append(rule_object)
            else:
                self.policy_map[act["name"]] = [rule_object]

    def run():
        await(status == True)

    def receive(msg=('FROM_RECEIVE_COORD', request), from_ = p):
        output("received inside worker", request.subject_id)
        send(('FROM_WORKER', request), to = (database))

    def receive(msg=('FROM_DATABASE', database_response), from_ = p):
        output("Received from database") #, database_response)

        """
        Evaluating the policy here
        """

        """
        Appending the tentative updates with the attributes
        received from the database to create a new changelist
        which will be used to evaluate the policy
        """

        sub_attribute_list_to_evaluate_policy = dict(database_response.request.sub_tent_updates.items() | database_response.sub_database_attributes.items())
        res_attribute_list_to_evaluate_policy = dict(database_response.request.res_tent_updates.items() | database_response.res_database_attributes.items())
        """
        Getting the list of rules which belong to this object
        from our policy map object
        """

        rules_list = self.policy_map[database_response.request.action]

        """
        Checking for rules which match the action in the request
        """
        update_rule = None
        for rule in rules_list:
            if validate_attributes_in_policy(rule.subject_condition, sub_attribute_list_to_evaluate_policy) == True:
                if validate_attributes_in_policy(rule.resource_condition, res_attribute_list_to_evaluate_policy) == True:
                    update_rule = rule
                    database_response.result = True
                    break

        response = Response(database_response.request, database_response.result)


        if update_rule:
            response.sub_to_update = update_attributes_after_policy_evaluation(update_rule.subject_update, sub_attribute_list_to_evaluate_policy)
            response.res_to_update = update_attributes_after_policy_evaluation(update_rule.resource_update, res_attribute_list_to_evaluate_policy)

        response.sub_changelist = database_response.sub_database_attributes
        response.res_changelist = database_response.res_database_attributes

        rid = database_response.request.subject_id % len(coordinators)

        send(('FROM_WORKER',response), to = (coordinators[rid]))
