import sys

import queue

import logging
import logging.handlers
import logging.config

from time import sleep
from threading import Thread
from collections import deque
from datetime import datetime
import time

from worker import Worker
from common import Request, Response

class Coordinator(process):

    def setup(coordinators:list, database, config):
        self.logger = logging.getLogger('sLogger')

        self.status = False
        
        self.sub_main_cache = {}
        self.sub_tent_cache = {}

        self.res_main_cache = {}
        
        self.send_sequence  = 1
        self.recv_sequence  = 1

        self.response_queue = queue.PriorityQueue(maxsize=0)       

        # thread safe implementation 
        self.request_sequence  = {}
        
        # Each coordinator intantiates its own workers
        # It is one as of now
        self.worker_index   = 0
        num_worker = int(config.get("setup", "num_worker_per_coord"))

        workers_set     = new(Worker, num = num_worker)
        self.workers    = list(workers_set)
        setup(self.workers, (coordinators, database, config))
        start(workers)


    def run():
        await(status == True)

    def attributes_in_sync(map1, map2): 
        for key in map1:
            timestamp1 = map1[key][1]

            if key in map2:
                timepstamp2 = map2[key][1]

                # TODO shoule there be other comparison?
                if(timestamp1 != timepstamp2):
                    return False

        return True

    def attributes_clash(map1, map2):
        for key in map1:
            if key in map2:
                return False

        return True

    def check_conflict(latest_tentative_map, sent_tent_map, changelist_map): 

        if not sent_tent_map:
            return attributes_clash(changelist_map, latest_tentative_map)
        else:
            return (attributes_in_sync(sent_tent_map, latest_tentative_map)
                and attributes_clash(changelist_map, latest_tentative_map))

    def entrypoint(request):
        
        # TODO REMOVE THIS fake test
        if request.subject_id in sub_main_cache:
            request.sub_tent_updates = sub_main_cache[request.subject_id]

        # overwrite any update if a tentative update exists for it
        # because the ones in tentative are more recent
        if request.subject_id in sub_tent_cache:
            for k,v in sub_tent_cache[request.subject_id].items():
                request.sub_tent_updates[k] = v 

        request.timestamp   = time.time()

        rid = request.resource_id % len(coordinators)

        # Add request to the sequence queue
        current_request_sequence = deque()
        if (request.subject_id in request_sequence):
            current_request_sequence = request_sequence[request.subject_id]

        current_request_sequence.append(request)
        request_sequence[request.subject_id] = current_request_sequence

        logger.debug("[Subject Coord] Sending request (seq. %s) to Resource Coord:%s", 
            send_sequence, str(request))

        send_sequence =  send_sequence + 1

        send(('FROM_SUBJECT_COORD', request), to=(coordinators[rid]))

    
    def receive(msg=('FROM_CLIENT', request), from_=p):
        logger.debug("[Subject Coord] Request received (seq. %s) from Client:%s", 
            recv_sequence, str(request))

        recv_sequence = recv_sequence + 1

        request.owner       = p

        sub_main_cache[request.subject_id] = {"history":("70", time.time())}
        
        entrypoint(request)

    
    def receive(msg=('FROM_SUBJECT_COORD', request), from_=p):

        logger.debug("[Resource Coord] Request received (seq. %s) from Sub Coord %s ",
            recv_sequence, str(request))

        recv_sequence = recv_sequence + 1

        # TODO REMOVE THIS 
        # res_main_cache[request.resource_id] = {"id":("bank A", time.time())}

        if request.resource_id in res_main_cache:
            request.res_tent_updates = res_main_cache[request.resource_id]


        logger.debug("[Resource Coord] Sending request (seq. %s) to Worker:%s", 
            send_sequence, str(request))

        send_sequence =  send_sequence + 1

        send(('FROM_RECEIVE_COORD', request), to = (workers[worker_index]))

        # Round robin worker usage for fair share distribution
        worker_index = worker_index + 1
        if worker_index == len(workers):
            worker_index = 0

    def extract_next_response():

        if (response_queue.empty() == False):

            response = response_queue.get()[1]

            if (response.request.subject_id in request_sequence):
                current_request_sequence = request_sequence[response.request.subject_id]
                if (current_request_sequence[0].timestamp < response.request.timestamp):
                    response_queue.put((response.request.timestamp, response))
                else:
                    process_response(response)
            else:
                process_response(response)


    def process_response(response):
        logger.debug("[Subject Coord] Processing response: %s ", str(response))

        '''
        # TODO Do we need this?

        # Check if evalution result is true, if false, return directly to client
        # as no updates should be processed and no conflicts should be checked
        if response.result == False:
            send(('OUTCOME', response), to = (response.request.owner))
            request_sequence[response.request.subject_id].popleft()
        '''

        logger.debug("[Subject Coord] Checking subject conflicts: %s ", str(response))
        retval = True

        if response.request.subject_id in sub_main_cache:
            retval = check_conflict(sub_main_cache[response.request.subject_id],
                                    response.sub_tent_attr_used,
                                    response.sub_db_attr_used)

        if (retval == True):

            # Execute tentative updates for subject attributes
            current_tent_map = {}
            if response.request.subject_id in sub_tent_cache:
               current_tent_map =  sub_tent_cache[response.request.subject_id]

            for k,v in response.sub_to_update.items():
                current_tent_map[k] = (v, time.time())

            sub_tent_cache[response.request.subject_id] = current_tent_map

            # Check for resource conclicts
            rid = response.request.resource_id % len(coordinators)

            logger.debug("[Subject Coord] Sending response (seq. %s) to Resource Coord:%s", 
                send_sequence, response)

            send_sequence =  send_sequence + 1
            
            send(('FROM_SUBJECT_COORD_RESPONSE', response), to=(coordinators[rid]))
            
        else:
            # Restart
            logger.error("[Subject Coord] Subject conflict detected: %s ", 
                str(response))
            logger.debug("[Subject Coord] Restarting: %s ", str(response.request))
            
            request_sequence[response.request.subject_id].popleft()
            entrypoint(response.request)

    def receive(msg=('FROM_WORKER', response), from_=p):
        
        logger.debug("[Subject Coord] Response received (seq. %s) from Worker: %s ", 
            recv_sequence, str(response))
        
        recv_sequence = recv_sequence + 1

        if (response.request.subject_id in request_sequence):

            current_request_sequence = request_sequence[response.request.subject_id]

            if (current_request_sequence[0].timestamp < response.request.timestamp):
                           
                response_queue.put((response.request.timestamp, response))
            else:
                process_response(response)
        else:
            process_response(response)
 
    def receive(msg=('FROM_SUBJECT_COORD_RESPONSE', response), from_ = p):
        logger.debug("[Resource Coord] Response received (seq. %s) from Subject Coord: %s ", 
            recv_sequence, str(response))

        recv_sequence = recv_sequence + 1

        logger.debug("Checking resource conflict: %s ", str(response))

        retval = True
        if response.request.resource_id in res_main_cache:
            retval = check_conflict(
                        res_main_cache[response.request.resource_id],
                        response.res_tent_attr_used,
                        response.res_db_attr_used)

        if (retval == True):

            # Execute tentative updates for resource attributes
            current_tent_map = {}
            if response.request.resource_id in res_main_cache:
               current_tent_map =  res_main_cache[response.request.resource_id]

            for k,v in response.res_to_update.items():
                current_tent_map[k] = (v, time.time())

            res_main_cache[response.request.resource_id] = current_tent_map

            # TODO:
            # send update to the database to update the value
        # Need to send result to subject in either conflict or no conflict case

        rid = response.request.subject_id % len(coordinators)
        
        logger.debug("[Resource Coord] Sending response (seq. %s) to Subject Coord:%s",
            send_sequence, str(response))

        send_sequence =  send_sequence + 1

        send(('FROM_RESOURCE_COORD_RESPONSE', response, retval), to=(coordinators[rid]))

    def receive(msg=('FROM_RESOURCE_COORD_RESPONSE', response, retval), from_ = p):
        logger.debug("[Subject Coord] Response received (seq. %s) from Resource Coord: %s ", 
            recv_sequence, str(response))

        recv_sequence = recv_sequence + 1

        if (True == retval):
            # No conflict, propapage the tentative subject updates to main
            logger.debug("[Subject Coord] Evaluation complete: %s", str(response))

            # Propagate subject tentative updates to main cache
            for k,v in sub_tent_cache[response.request.subject_id].items():
                sub_main_cache[response.request.subject_id][k]  = v

            # TODO :
            # send the updates to the database
            send(('OUTCOME', response), to = (response.request.owner))
            request_sequence[response.request.subject_id].popleft()
            # Process next response that was queued
            extract_next_response()
        else:
            # Restart because of resource conflicts
            logger.error("[Subject Coord] Resource conflict detected: %s ", 
                str(response))
            logger.debug("Restarting: %s ", str(response.request))
            
            request_sequence[response.request.subject_id].popleft()

            entrypoint(response.request)
            extract_next_response()

