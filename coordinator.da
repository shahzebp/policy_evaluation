import sys
from time import sleep
from collections import deque

from worker import Worker
from common import Request, Response

class Coordinator(process):
 
    def setup(coordinators:list, database, config):
        self.status = False
        
        self.sub_tent_cache = {}
        self.res_tent_cache = {}
        self.sequence       = 0
        self.pending_queue  = deque()
        # Each coordinator intantiates its own workers
        # It is one as of now
        workers_set     = new(Worker, num = 1)
        self.workers    = list(workers_set)
        setup(self.workers, (coordinators, database, config))
        start(workers)


    def run():
        await(status == True)

    def attributes_in_sync(map1, map2):
        for key in map1:
            val1 = map1[key]

            if key in map2:
                val2 = map2[key]

                if(val1 != val2):
                    return False

        return True

    def check_conflict(latest_tentative_map, sent_tent_map, changelist_map):
        if not sent_tent_map:
            return attributes_in_sync(changelist_map, latest_tentative_map)
        else:
            return (attributes_in_sync(sent_tent_map, latest_tentative_map)
                and attributes_in_sync(changelist_map, latest_tentative_map))

    def receive(msg=('FROM_CLIENT', request), from_=p):
        output("Subject coord request ", request.subject_id)

        #sub_tent_cache[request.subject_id] = {"history":"80"}
        if request.subject_id in sub_tent_cache:
            request.sub_tent_updates = sub_tent_cache[request.subject_id]

        request.owner       = p
        request.timestamp   = sequence
        sequence            = sequence + 1

        rid = request.resource_id % len(coordinators)

        pending_queue.append(request)

        send(('FROM_SUBJECT_COORD', request), to=(coordinators[rid]))


    def receive(msg=('FROM_SUBJECT_COORD', request), from_=p):

        output("Resource coord request", request.resource_id)

        #res_tent_cache[request.resource_id] = {"id":"bank A"}
        if request.resource_id in res_tent_cache:
            request.res_tent_updates = res_tent_cache[request.resource_id]

        send(('FROM_RECEIVE_COORD', request), to = (workers))

    def receive(msg=('FROM_WORKER', response), from_=p):
        output("resolving subject conflict", response.request.subject_id)

        retval = True

        while(pending_queue[0].timestamp > response.request.timestamp):
            sleep(0.05)

        if response.request.subject_id in sub_tent_cache:
            retval = check_conflict(sub_tent_cache[response.request.subject_id],
                                    response.request.sub_tent_updates, response.sub_changelist)

        if (retval == True):
            rid = response.request.resource_id % len(coordinators)
            send(('FROM_SUBJECT_COORD_RESPONSE', response), to=(coordinators[rid]))
        # else restart

    def receive(msg=('FROM_SUBJECT_COORD_RESPONSE', response), from_ = p):
        output("resolving resource conflict", response.request.resource_id)

        retval = True

        if response.request.resource_id in res_tent_cache:
            retval = check_conflict(res_tent_cache[response.request.resource_id],
                                    response.request.res_tent_updates, response.res_changelist)

        if (retval == True):
            rid = response.request.subject_id % len(coordinators)
            send(('FROM_RESOURCE_COORD_RESPONSE', response), to=(coordinators[rid]))
        # else restart

    def receive(msg=('FROM_RESOURCE_COORD_RESPONSE', response), from_ = p):
        output("succesfull evaluation", response.request.resource_id)

        send(('OUTCOME', response), to = (response.request.owner))
        pending_queue.popleft()